plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.kwang23'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

bootJar.enabled = false
ext{
	resilience4jVersion = '1.7.1'
}
subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		runtimeOnly 'com.h2database:h2'
		runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation "org.springframework.boot:spring-boot-starter-actuator"
		implementation "org.springframework.boot:spring-boot-starter-aop"
		implementation "org.springframework.boot:spring-boot-starter-data-redis"
		implementation("org.redisson:redisson-spring-boot-starter:3.24.3")

		implementation 'com.querydsl:querydsl-jpa'
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

		implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
		implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
		implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	}

	test {
		useJUnitPlatform()
	}
	def querydslDir = "src/main/generated"

	sourceSets {
		main.java.srcDirs += [ querydslDir ]
	}

	tasks.withType(JavaCompile) {
		options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
	}

	clean.doLast {
		file(querydslDir).deleteDir()
	}
}

project(':search-api') {
	dependencies {
		compileOnly project(':search-core')
	}
}

project(':search-core') {
	bootJar { enabled = false }
	jar { enabled = true }
}